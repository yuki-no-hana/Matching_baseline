import torch
import torch.utils.data as data
import torchvision.transforms as transforms
import os
import nltk
from PIL import Image
import numpy as np
import json as jsonmod
import codecs
import opts


class PrecompDataset_bbx(data.Dataset):
    """
    Load precomputed captions and image features
    Possible options: f30k_precomp, coco_precomp
    """

    def __init__(self, data_path, data_split, vocab, bbx=False, implicit=False):
        loc = data_path + '/'
        self.data_split = data_split
        self.vocab=vocab

        # Captions
        self.captions = []
        with codecs.open(loc+'%s_caps.txt' % data_split, 'r', encoding='utf-8') as f:
            for line in f:
                self.captions.append(line.strip())
        '''with codecs.open(loc + '%s_precaps_stan.txt' % data_split, 'r', encoding='utf-8') as f:
            for line in f:
                self.captions.append(np.array(line.strip().split(','),dtype=np.float32))'''

        # Image features
        self.images = np.load(loc + '%s_ims.npy' % data_split)
        self.length = len(self.captions)
        self.bbx=None
        self.implicit=None
        self.bbx_is_true=False
        self.implicit_is_true=False
        if bbx!=False:
            self.bbx = np.load(loc + '%s_spacial.npy' % data_split)
            self.bbx_is_true=True
        if implicit!=False:
            self.implicit = np.load(loc + '%s_positional.npy' % data_split)
            self.implicit_is_true=True

        print("split: %s, total images: %d, total captions: %d" % (data_split, self.images.shape[0], self.length))
        # rkiros data has redundancy in images, we divide by 5, 10crop doesn't
        if self.images.shape[0] != self.length:
            self.im_div = 5
        else:
            self.im_div = 1
        # the development set for coco is large and so validation would be slow
        if data_split == 'dev':
            self.length = 5000
        # 实验得出这个length是多少，一共enumerate出来的的就是多少，哪怕原先dev是5070个数

    def __getitem__(self, index):
        # handle the image redundancy
        img_id = int(index / self.im_div)
        image = torch.Tensor(self.images[img_id])
        caption = self.captions[index]
        vocab = self.vocab
        bbx=None
        implicit=None
        if self.bbx_is_true == True:
            bbx = torch.Tensor(self.bbx[img_id])
        if self.implicit_is_true == True:
            implicit = torch.Tensor(self.implicit[img_id])


        # 此时caption里面还是str
        # Convert caption (string) to word ids.
        tokens = nltk.tokenize.word_tokenize(
            str(caption).lower())


        caption = []
        caption.append(vocab('<start>'))
        caption.extend([vocab(token) for token in tokens])
        caption.append(vocab('<end>'))
        target = torch.Tensor(caption)

        # image是图的region feature，target是每句cap把词都换成数字
        return image, target, index, img_id, bbx, implicit

    def __len__(self):
        return self.length


def collate_fn(data):
    """Build mini-batch tensors from a list of (image, caption) tuples.
    Args:
        data: list of (image, caption) tuple.
            - image: torch tensor of shape (3, 256, 256).
            - caption: torch tensor of shape (?); variable length.

    Returns:
        images: torch tensor of shape (batch_size, 3, 256, 256).
        targets: torch tensor of shape (batch_size, padded_length).
        lengths: list; valid length for each padded caption.
    """
    # Sort a data list by caption length
    data.sort(key=lambda x: len(x[1]), reverse=True)
    images, captions, ids, img_ids, bbx, implicit = zip(*data)
    if bbx[0] is not None:
        bbx=torch.stack(bbx,0)
    if implicit[0] is not None:
        implicit = torch.stack(implicit, 0)

    # Merge images (convert tuple of 3D tensor to 4D tensor)
    images = torch.stack(images, 0)

    # Merget captions (convert tuple of 1D tensor to 2D tensor)
    lengths = torch.LongTensor([len(cap) for cap in captions])
    # 一个一维数组，记录每句话的单词数（不算开始和结束）
    targets = torch.zeros(len(captions), max(lengths)).long()
    # target第一维度表有多少个caption，第二维度记录每一个cap里面词的ids
    masks = torch.zeros(len(captions), max(lengths)).long()
    # mask为0的地方需要补充东西（没词）
    for i, cap in enumerate(captions):
        end = lengths[i]
        targets[i, :end] = cap[:end]
        masks[i, :end] = 1


    return images, targets, lengths, masks, ids, bbx, implicit


def get_precomp_loader_bbx(data_path, data_split, vocab, opt, batch_size=100,
                       shuffle=True, num_workers=2, bbx=False, implicit=False):
    """Returns torch.utils.data.DataLoader for custom coco dataset."""
    dset = PrecompDataset_bbx(data_path, data_split, vocab, bbx, implicit)

    data_loader = torch.utils.data.DataLoader(dataset=dset,
                                              batch_size=batch_size,
                                              shuffle=shuffle,
                                              pin_memory=True,
                                              collate_fn=collate_fn)
    return data_loader


def get_loaders_bbx(data_name, vocab, batch_size, workers, opt):
    dpath = os.path.join(opt.data_path, data_name)
    # dpath     ./data/precomp
    train_loader = get_precomp_loader_bbx(dpath, 'train', vocab, opt,
                                      batch_size, True, workers, opt.spatial, opt.implicit)
    val_loader = get_precomp_loader_bbx(dpath, 'dev',  vocab, opt,
                                    batch_size, False, workers, opt.spatial, opt.implicit)
    return train_loader, val_loader


def get_test_loader_bbx(data_name,  vocab, batch_size,
                    workers, opt):
    dpath = os.path.join(opt.data_path, data_name)
    test_loader = get_precomp_loader_bbx(dpath, "test",  vocab, opt,
                                     batch_size, False, workers, opt.spatial, opt.implicit)
    return test_loader
